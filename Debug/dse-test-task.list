
dse-test-task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001070  08001070  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001070  08001070  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000018  08001090  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001090  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012ae  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b1  00000000  00000000  000212ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00021aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00021bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b59f  00000000  00000000  00021cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027ad  00000000  00000000  0002d277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003a3dc  00000000  00000000  0002fa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00069e00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000314  00000000  00000000  00069e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001048 	.word	0x08001048

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08001048 	.word	0x08001048

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000416:	4b31      	ldr	r3, [pc, #196]	; (80004dc <SystemCoreClockUpdate+0xdc>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	220c      	movs	r2, #12
 800041c:	4013      	ands	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2b08      	cmp	r3, #8
 8000424:	d011      	beq.n	800044a <SystemCoreClockUpdate+0x4a>
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b08      	cmp	r3, #8
 800042a:	d841      	bhi.n	80004b0 <SystemCoreClockUpdate+0xb0>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <SystemCoreClockUpdate+0x3a>
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b04      	cmp	r3, #4
 8000436:	d004      	beq.n	8000442 <SystemCoreClockUpdate+0x42>
 8000438:	e03a      	b.n	80004b0 <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <SystemCoreClockUpdate+0xe4>)
 800043e:	601a      	str	r2, [r3, #0]
      break;
 8000440:	e03a      	b.n	80004b8 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000442:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 8000444:	4a27      	ldr	r2, [pc, #156]	; (80004e4 <SystemCoreClockUpdate+0xe4>)
 8000446:	601a      	str	r2, [r3, #0]
      break;
 8000448:	e036      	b.n	80004b8 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800044a:	4b24      	ldr	r3, [pc, #144]	; (80004dc <SystemCoreClockUpdate+0xdc>)
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	23f0      	movs	r3, #240	; 0xf0
 8000450:	039b      	lsls	r3, r3, #14
 8000452:	4013      	ands	r3, r2
 8000454:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000456:	4b21      	ldr	r3, [pc, #132]	; (80004dc <SystemCoreClockUpdate+0xdc>)
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	025b      	lsls	r3, r3, #9
 800045e:	4013      	ands	r3, r2
 8000460:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	0c9b      	lsrs	r3, r3, #18
 8000466:	3302      	adds	r3, #2
 8000468:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <SystemCoreClockUpdate+0xdc>)
 800046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046e:	220f      	movs	r2, #15
 8000470:	4013      	ands	r3, r2
 8000472:	3301      	adds	r3, #1
 8000474:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	025b      	lsls	r3, r3, #9
 800047c:	429a      	cmp	r2, r3
 800047e:	d10a      	bne.n	8000496 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000480:	6839      	ldr	r1, [r7, #0]
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <SystemCoreClockUpdate+0xe4>)
 8000484:	f7ff fe40 	bl	8000108 <__udivsi3>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	435a      	muls	r2, r3
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 8000492:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000494:	e010      	b.n	80004b8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	000a      	movs	r2, r1
 800049a:	0152      	lsls	r2, r2, #5
 800049c:	1a52      	subs	r2, r2, r1
 800049e:	0193      	lsls	r3, r2, #6
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	185b      	adds	r3, r3, r1
 80004a6:	021b      	lsls	r3, r3, #8
 80004a8:	001a      	movs	r2, r3
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 80004ac:	601a      	str	r2, [r3, #0]
      break;
 80004ae:	e003      	b.n	80004b8 <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <SystemCoreClockUpdate+0xe4>)
 80004b4:	601a      	str	r2, [r3, #0]
      break;
 80004b6:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SystemCoreClockUpdate+0xdc>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	091b      	lsrs	r3, r3, #4
 80004be:	220f      	movs	r2, #15
 80004c0:	4013      	ands	r3, r2
 80004c2:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <SystemCoreClockUpdate+0xe8>)
 80004c4:	5cd3      	ldrb	r3, [r2, r3]
 80004c6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	40da      	lsrs	r2, r3
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <SystemCoreClockUpdate+0xe0>)
 80004d2:	601a      	str	r2, [r3, #0]
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b004      	add	sp, #16
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	20000000 	.word	0x20000000
 80004e4:	007a1200 	.word	0x007a1200
 80004e8:	08001060 	.word	0x08001060

080004ec <oneWireTemp>:
 *      Author: illia-lykhoshvai
 */

#include "application.h"

PT_THREAD(oneWireTemp(struct pt* pt, volatile i16* returnTemperature)) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	static struct pt tempPt;
	static i16 temperature;
	static ui8 dsStatus, errorsCounter;
	PT_BEGIN(pt);
 80004f6:	230f      	movs	r3, #15
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2b1b      	cmp	r3, #27
 8000504:	d058      	beq.n	80005b8 <oneWireTemp+0xcc>
 8000506:	dd00      	ble.n	800050a <oneWireTemp+0x1e>
 8000508:	e076      	b.n	80005f8 <oneWireTemp+0x10c>
 800050a:	2b19      	cmp	r3, #25
 800050c:	d03b      	beq.n	8000586 <oneWireTemp+0x9a>
 800050e:	dd00      	ble.n	8000512 <oneWireTemp+0x26>
 8000510:	e072      	b.n	80005f8 <oneWireTemp+0x10c>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <oneWireTemp+0x30>
 8000516:	2b11      	cmp	r3, #17
 8000518:	d00a      	beq.n	8000530 <oneWireTemp+0x44>
 800051a:	e06d      	b.n	80005f8 <oneWireTemp+0x10c>

	PT_INIT(&tempPt);
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <oneWireTemp+0x124>)
 800051e:	2200      	movs	r2, #0
 8000520:	801a      	strh	r2, [r3, #0]
	PT_YIELD_UNTIL(pt, (readDS(&tempPt, &dsStatus, &temperature) == PT_ENDED));
 8000522:	230f      	movs	r3, #15
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2211      	movs	r2, #17
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	230f      	movs	r3, #15
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <oneWireTemp+0x60>
 800053a:	4a36      	ldr	r2, [pc, #216]	; (8000614 <oneWireTemp+0x128>)
 800053c:	4936      	ldr	r1, [pc, #216]	; (8000618 <oneWireTemp+0x12c>)
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <oneWireTemp+0x124>)
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fbff 	bl	8000d44 <readDS>
 8000546:	0003      	movs	r3, r0
 8000548:	2b03      	cmp	r3, #3
 800054a:	d001      	beq.n	8000550 <oneWireTemp+0x64>
 800054c:	2301      	movs	r3, #1
 800054e:	e05b      	b.n	8000608 <oneWireTemp+0x11c>

	if (dsStatus == correctValue) { // good data
 8000550:	4b31      	ldr	r3, [pc, #196]	; (8000618 <oneWireTemp+0x12c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d124      	bne.n	80005a2 <oneWireTemp+0xb6>
		if (errorsCounter > 0) {
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <oneWireTemp+0x130>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <oneWireTemp+0x82>
			errorsCounter--;
 8000560:	4b2e      	ldr	r3, [pc, #184]	; (800061c <oneWireTemp+0x130>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <oneWireTemp+0x130>)
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e004      	b.n	8000578 <oneWireTemp+0x8c>
		} else {
			*returnTemperature = temperature;
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <oneWireTemp+0x128>)
 8000570:	2200      	movs	r2, #0
 8000572:	5e9a      	ldrsh	r2, [r3, r2]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	801a      	strh	r2, [r3, #0]
		}
		PT_YIELD_UNTIL(pt, (startDS(&tempPt) == PT_ENDED));
 8000578:	230f      	movs	r3, #15
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2219      	movs	r2, #25
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <oneWireTemp+0xb2>
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <oneWireTemp+0x124>)
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fb75 	bl	8000c82 <startDS>
 8000598:	0003      	movs	r3, r0
 800059a:	2b03      	cmp	r3, #3
 800059c:	d02c      	beq.n	80005f8 <oneWireTemp+0x10c>
 800059e:	2301      	movs	r3, #1
 80005a0:	e032      	b.n	8000608 <oneWireTemp+0x11c>
	} else if (dsStatus == defaultValue) { // after reset
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <oneWireTemp+0x12c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d114      	bne.n	80005d4 <oneWireTemp+0xe8>
		PT_YIELD_UNTIL(pt, (startDS(&tempPt) == PT_ENDED));
 80005aa:	230f      	movs	r3, #15
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	221b      	movs	r2, #27
 80005b6:	801a      	strh	r2, [r3, #0]
 80005b8:	230f      	movs	r3, #15
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d006      	beq.n	80005d0 <oneWireTemp+0xe4>
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <oneWireTemp+0x124>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fb5c 	bl	8000c82 <startDS>
 80005ca:	0003      	movs	r3, r0
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d003      	beq.n	80005d8 <oneWireTemp+0xec>
 80005d0:	2301      	movs	r3, #1
 80005d2:	e019      	b.n	8000608 <oneWireTemp+0x11c>
		goto errorProcessing;
	} else { // error
		errorProcessing:
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	e000      	b.n	80005da <oneWireTemp+0xee>
		goto errorProcessing;
 80005d8:	46c0      	nop			; (mov r8, r8)
		if (errorsCounter >= 2) {
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <oneWireTemp+0x130>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d904      	bls.n	80005ec <oneWireTemp+0x100>
			*returnTemperature = ERROR_TEMP;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2201      	movs	r2, #1
 80005e6:	4252      	negs	r2, r2
 80005e8:	801a      	strh	r2, [r3, #0]
 80005ea:	e005      	b.n	80005f8 <oneWireTemp+0x10c>
		} else {
			errorsCounter++;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <oneWireTemp+0x130>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <oneWireTemp+0x130>)
 80005f6:	701a      	strb	r2, [r3, #0]
		}
	}

	PT_END(pt);
 80005f8:	230f      	movs	r3, #15
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	801a      	strh	r2, [r3, #0]
 8000606:	2303      	movs	r3, #3
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000034 	.word	0x20000034
 8000614:	20000038 	.word	0x20000038
 8000618:	20000036 	.word	0x20000036
 800061c:	2000003a 	.word	0x2000003a

08000620 <TIM17_IRQHandler>:
static volatile ui16 hzCounter;
static volatile ui8 ledCounter, mainTaskSemaphore, oneWireSemaphore = 1;
static struct pt oneWirePT;
ui8 showBuffer[DIGITS] = { 8, 8, 8, 8 };

void TIM17_IRQHandler(void) { // 1ms int.
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
#define HZ_VALUE 1000
	timClearIFlag();
 8000624:	f000 f99a 	bl	800095c <timClearIFlag>
/// LED section
	drawDigit(showBuffer[ledCounter],ledCounter);
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <TIM17_IRQHandler+0x8c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	001a      	movs	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <TIM17_IRQHandler+0x90>)
 8000632:	5c9a      	ldrb	r2, [r3, r2]
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <TIM17_IRQHandler+0x8c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	0019      	movs	r1, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f000 fc7d 	bl	8000f3c <drawDigit>
	ledCounter++;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <TIM17_IRQHandler+0x8c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <TIM17_IRQHandler+0x8c>)
 800064e:	701a      	strb	r2, [r3, #0]
	ledCounter %= DIGITS;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <TIM17_IRQHandler+0x8c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2203      	movs	r2, #3
 8000658:	4013      	ands	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <TIM17_IRQHandler+0x8c>)
 800065e:	701a      	strb	r2, [r3, #0]
/// 1-Wire section
	if(oneWireSemaphore) {
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <TIM17_IRQHandler+0x94>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00b      	beq.n	8000682 <TIM17_IRQHandler+0x62>
		if (oneWireTemp(&oneWirePT, &temperature) == PT_ENDED) {
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <TIM17_IRQHandler+0x98>)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <TIM17_IRQHandler+0x9c>)
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff ff3b 	bl	80004ec <oneWireTemp>
 8000676:	0003      	movs	r3, r0
 8000678:	2b03      	cmp	r3, #3
 800067a:	d102      	bne.n	8000682 <TIM17_IRQHandler+0x62>
			oneWireSemaphore = 0;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <TIM17_IRQHandler+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
		}
	}
/// 1HZ action section
	if(++hzCounter >= HZ_VALUE) {
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <TIM17_IRQHandler+0xa0>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	b29b      	uxth	r3, r3
 8000688:	3301      	adds	r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <TIM17_IRQHandler+0xa0>)
 800068e:	1c19      	adds	r1, r3, #0
 8000690:	8011      	strh	r1, [r2, #0]
 8000692:	22fa      	movs	r2, #250	; 0xfa
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	4293      	cmp	r3, r2
 8000698:	d305      	bcc.n	80006a6 <TIM17_IRQHandler+0x86>
		hzCounter = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <TIM17_IRQHandler+0xa0>)
 800069c:	2200      	movs	r2, #0
 800069e:	801a      	strh	r2, [r3, #0]
		mainTaskSemaphore = 1;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <TIM17_IRQHandler+0xa4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
	}
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000040 	.word	0x20000040
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000004 	.word	0x20000004
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000044 	.word	0x20000044
 80006c0:	2000003e 	.word	0x2000003e
 80006c4:	20000041 	.word	0x20000041

080006c8 <main>:

int main(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	PT_INIT(&oneWirePT);
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <main+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	801a      	strh	r2, [r3, #0]
	initHW();
 80006d2:	f000 f87b 	bl	80007cc <initHW>

	while(1) {
		if (mainTaskSemaphore) {
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <main+0xc0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0fa      	beq.n	80006d6 <main+0xe>
			mainTaskSemaphore = 0;
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <main+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]

			if (temperature < ERROR_TEMP) {
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <main+0xc4>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
				showBuffer[0] = (temperature / 1000) % 10;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <main+0xc4>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	22fa      	movs	r2, #250	; 0xfa
 80006f2:	0091      	lsls	r1, r2, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff fd91 	bl	800021c <__divsi3>
 80006fa:	0003      	movs	r3, r0
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	210a      	movs	r1, #10
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fe71 	bl	80003e8 <__aeabi_idivmod>
 8000706:	000b      	movs	r3, r1
 8000708:	b21b      	sxth	r3, r3
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <main+0xc8>)
 800070e:	701a      	strb	r2, [r3, #0]
				showBuffer[1] = (temperature / 100) % 10 | POINT;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <main+0xc4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	b21b      	sxth	r3, r3
 8000716:	2164      	movs	r1, #100	; 0x64
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff fd7f 	bl	800021c <__divsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	b21b      	sxth	r3, r3
 8000722:	210a      	movs	r1, #10
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff fe5f 	bl	80003e8 <__aeabi_idivmod>
 800072a:	000b      	movs	r3, r1
 800072c:	b21b      	sxth	r3, r3
 800072e:	b25b      	sxtb	r3, r3
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	4252      	negs	r2, r2
 8000734:	4313      	orrs	r3, r2
 8000736:	b25b      	sxtb	r3, r3
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0xc8>)
 800073c:	705a      	strb	r2, [r3, #1]
				showBuffer[2] = (temperature / 10) % 10;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0xc4>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b21b      	sxth	r3, r3
 8000744:	210a      	movs	r1, #10
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fd68 	bl	800021c <__divsi3>
 800074c:	0003      	movs	r3, r0
 800074e:	b21b      	sxth	r3, r3
 8000750:	210a      	movs	r1, #10
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fe48 	bl	80003e8 <__aeabi_idivmod>
 8000758:	000b      	movs	r3, r1
 800075a:	b21b      	sxth	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <main+0xc8>)
 8000760:	709a      	strb	r2, [r3, #2]
				showBuffer[3] = temperature % 10;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <main+0xc4>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b21b      	sxth	r3, r3
 8000768:	210a      	movs	r1, #10
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fe3c 	bl	80003e8 <__aeabi_idivmod>
 8000770:	000b      	movs	r3, r1
 8000772:	b21b      	sxth	r3, r3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <main+0xc8>)
 8000778:	70da      	strb	r2, [r3, #3]
			} else {
				memset(showBuffer,HYPHEN_SYMBOL,DIGITS);
			}

			oneWireSemaphore = 1;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <main+0xcc>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
		if (mainTaskSemaphore) {
 8000780:	e7a9      	b.n	80006d6 <main+0xe>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000044 	.word	0x20000044
 8000788:	20000041 	.word	0x20000041
 800078c:	2000003c 	.word	0x2000003c
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b7f      	cmp	r3, #127	; 0x7f
 80007aa:	d809      	bhi.n	80007c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	231f      	movs	r3, #31
 80007b4:	401a      	ands	r2, r3
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_EnableIRQ+0x30>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4091      	lsls	r1, r2
 80007bc:	000a      	movs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
  }
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	e000e100 	.word	0xe000e100

080007cc <initHW>:

void initRCC(void);
void initGPIO(void);
void initTIM(void);

void initHW(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	initRCC();
 80007d0:	f000 f808 	bl	80007e4 <initRCC>
	initTIM();
 80007d4:	f000 f840 	bl	8000858 <initTIM>
	initGPIO();
 80007d8:	f000 f886 	bl	80008e8 <initGPIO>
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <initRCC>:

void initRCC(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	// turning pll off for safety purposes.
	RCC->CR &= ~RCC_CR_PLLON;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <initRCC+0x6c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <initRCC+0x6c>)
 80007ee:	4919      	ldr	r1, [pc, #100]	; (8000854 <initRCC+0x70>)
 80007f0:	400a      	ands	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
	while(RCC->CR & RCC_CR_PLLRDY);
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <initRCC+0x6c>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	049b      	lsls	r3, r3, #18
 80007fe:	4013      	ands	r3, r2
 8000800:	d1f9      	bne.n	80007f6 <initRCC+0x12>
	// configuring pll
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2 + RCC_CFGR_PLLMUL12;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <initRCC+0x6c>)
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <initRCC+0x6c>)
 8000808:	21a0      	movs	r1, #160	; 0xa0
 800080a:	0389      	lsls	r1, r1, #14
 800080c:	430a      	orrs	r2, r1
 800080e:	605a      	str	r2, [r3, #4]
	// turning pll on
	RCC->CR |= RCC_CR_PLLON;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <initRCC+0x6c>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <initRCC+0x6c>)
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	0449      	lsls	r1, r1, #17
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <initRCC+0x6c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	049b      	lsls	r3, r3, #18
 8000828:	4013      	ands	r3, r2
 800082a:	d0f9      	beq.n	8000820 <initRCC+0x3c>
	// selecting pll as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <initRCC+0x6c>)
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <initRCC+0x6c>)
 8000832:	2102      	movs	r1, #2
 8000834:	430a      	orrs	r2, r1
 8000836:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <initRCC+0x6c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	220c      	movs	r2, #12
 8000840:	4013      	ands	r3, r2
 8000842:	2b08      	cmp	r3, #8
 8000844:	d1f9      	bne.n	800083a <initRCC+0x56>
	SystemCoreClockUpdate();
 8000846:	f7ff fddb 	bl	8000400 <SystemCoreClockUpdate>
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	feffffff 	.word	0xfeffffff

08000858 <initTIM>:

void initTIM(void) {
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	af00      	add	r7, sp, #0
	// input on tim17 is 48mhz
	// purpose: generate int. every 1 ms
	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <initTIM+0x80>)
 800085e:	699a      	ldr	r2, [r3, #24]
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <initTIM+0x80>)
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	02c9      	lsls	r1, r1, #11
 8000866:	430a      	orrs	r2, r1
 8000868:	619a      	str	r2, [r3, #24]
	TIM17->PSC = TIM_PSC;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <initTIM+0x84>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	491c      	ldr	r1, [pc, #112]	; (80008e0 <initTIM+0x88>)
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fc49 	bl	8000108 <__udivsi3>
 8000876:	0003      	movs	r3, r0
 8000878:	001a      	movs	r2, r3
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <initTIM+0x8c>)
 800087c:	3a01      	subs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM17->ARR = TIM_ARR;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <initTIM+0x84>)
 8000882:	681c      	ldr	r4, [r3, #0]
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <initTIM+0x84>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4915      	ldr	r1, [pc, #84]	; (80008e0 <initTIM+0x88>)
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fc3c 	bl	8000108 <__udivsi3>
 8000890:	0003      	movs	r3, r0
 8000892:	0019      	movs	r1, r3
 8000894:	0020      	movs	r0, r4
 8000896:	f7ff fc37 	bl	8000108 <__udivsi3>
 800089a:	0003      	movs	r3, r0
 800089c:	001a      	movs	r2, r3
 800089e:	23fa      	movs	r3, #250	; 0xfa
 80008a0:	0099      	lsls	r1, r3, #2
 80008a2:	0010      	movs	r0, r2
 80008a4:	f7ff fc30 	bl	8000108 <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	001a      	movs	r2, r3
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <initTIM+0x8c>)
 80008ae:	3a01      	subs	r2, #1
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM17->CR1 = (1 << 7) ; // only arr enable
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <initTIM+0x8c>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	601a      	str	r2, [r3, #0]
	TIM17->DIER = 1; // enable int on update (overflow)
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <initTIM+0x8c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM17_IRQn);
 80008be:	2016      	movs	r0, #22
 80008c0:	f7ff ff6a 	bl	8000798 <__NVIC_EnableIRQ>
	TIM17->CR1 |= 1; // turn on counter
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <initTIM+0x8c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <initTIM+0x8c>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bdb0      	pop	{r4, r5, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000
 80008dc:	20000000 	.word	0x20000000
 80008e0:	000f4240 	.word	0x000f4240
 80008e4:	40014800 	.word	0x40014800

080008e8 <initGPIO>:

void initGPIO(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	// PB[0-7] = indicator segments, common cathode
	// PC[0-3] = indicator digits, common cathode
	// PA0 = onewire
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN + RCC_AHBENR_GPIOBEN + RCC_AHBENR_GPIOCEN;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <initGPIO+0x64>)
 80008ee:	695a      	ldr	r2, [r3, #20]
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <initGPIO+0x64>)
 80008f2:	21e0      	movs	r1, #224	; 0xe0
 80008f4:	0309      	lsls	r1, r1, #12
 80008f6:	430a      	orrs	r2, r1
 80008f8:	615a      	str	r2, [r3, #20]
	// open-drain
	GPIOA->OTYPER |= GPIO_OTYPER_OT_0;
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR0;
 800090a:	2390      	movs	r3, #144	; 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2103      	movs	r1, #3
 8000916:	430a      	orrs	r2, r1
 8000918:	609a      	str	r2, [r3, #8]
	// output push-pull
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 + GPIO_MODER_MODER1_0 + GPIO_MODER_MODER2_0 + GPIO_MODER_MODER3_0
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <initGPIO+0x68>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <initGPIO+0x68>)
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <initGPIO+0x6c>)
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
			+ GPIO_MODER_MODER4_0 + GPIO_MODER_MODER5_0 + GPIO_MODER_MODER6_0 + GPIO_MODER_MODER7_0);
	GPIOB->BRR = segmAll;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <initGPIO+0x68>)
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
	// output open-drain
	GPIOC->MODER |= (GPIO_MODER_MODER0_0 + GPIO_MODER_MODER1_0 + GPIO_MODER_MODER2_0 + GPIO_MODER_MODER3_0);
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <initGPIO+0x70>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <initGPIO+0x70>)
 8000932:	2155      	movs	r1, #85	; 0x55
 8000934:	430a      	orrs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER |= (GPIO_OTYPER_OT_0 + GPIO_OTYPER_OT_1 + GPIO_OTYPER_OT_2 + GPIO_OTYPER_OT_3);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <initGPIO+0x70>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <initGPIO+0x70>)
 800093e:	210f      	movs	r1, #15
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400
 8000954:	00005555 	.word	0x00005555
 8000958:	48000800 	.word	0x48000800

0800095c <timClearIFlag>:


void timClearIFlag(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	TIM17->SR = 0;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <timClearIFlag+0x10>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40014800 	.word	0x40014800

08000970 <dsCRC>:
 *      Author: illia-lykhoshvai
 */

#include "onewire.h"

ui8 dsCRC(ui8 *addr, ui8 len) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	000a      	movs	r2, r1
 800097a:	1cfb      	adds	r3, r7, #3
 800097c:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0;
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8000986:	e039      	b.n	80009fc <dsCRC+0x8c>
		uint8_t inbyte = *addr++;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	220e      	movs	r2, #14
 8000990:	18ba      	adds	r2, r7, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	7013      	strb	r3, [r2, #0]
		for (uint8_t i = 8; i; i--) {
 8000996:	230d      	movs	r3, #13
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	2208      	movs	r2, #8
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e028      	b.n	80009f2 <dsCRC+0x82>
		  uint8_t mix = (crc ^ inbyte) & 0x01;
 80009a0:	200f      	movs	r0, #15
 80009a2:	183a      	adds	r2, r7, r0
 80009a4:	230e      	movs	r3, #14
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4053      	eors	r3, r2
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	240c      	movs	r4, #12
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2101      	movs	r1, #1
 80009b6:	400a      	ands	r2, r1
 80009b8:	701a      	strb	r2, [r3, #0]
		  crc >>= 1;
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	183a      	adds	r2, r7, r0
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	0852      	lsrs	r2, r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
		  if (mix) crc ^= 0x8C;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d006      	beq.n	80009da <dsCRC+0x6a>
 80009cc:	183b      	adds	r3, r7, r0
 80009ce:	183a      	adds	r2, r7, r0
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	2174      	movs	r1, #116	; 0x74
 80009d4:	4249      	negs	r1, r1
 80009d6:	404a      	eors	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
		  inbyte >>= 1;
 80009da:	220e      	movs	r2, #14
 80009dc:	18bb      	adds	r3, r7, r2
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	0852      	lsrs	r2, r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 8; i; i--) {
 80009e6:	210d      	movs	r1, #13
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	3a01      	subs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	230d      	movs	r3, #13
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1d1      	bne.n	80009a0 <dsCRC+0x30>
	while (len--) {
 80009fc:	1cfb      	adds	r3, r7, #3
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	1cfa      	adds	r2, r7, #3
 8000a02:	1e59      	subs	r1, r3, #1
 8000a04:	7011      	strb	r1, [r2, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1be      	bne.n	8000988 <dsCRC+0x18>
		}
	}
	return crc;
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b005      	add	sp, #20
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <delayUs>:

void delayUs(ui32 time) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	for(time *= 4;time > 0; time--) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e003      	b.n	8000a30 <delayUs+0x18>
		asm("nop");
 8000a28:	46c0      	nop			; (mov r8, r8)
	for(time *= 4;time > 0; time--) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f8      	bne.n	8000a28 <delayUs+0x10>
	}
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <checkPresence>:

void checkPresence(ui8* presence) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	W1_OUT |= W1_OUT_BMASK;
 8000a4c:	2390      	movs	r3, #144	; 0x90
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	695a      	ldr	r2, [r3, #20]
 8000a52:	2390      	movs	r3, #144	; 0x90
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	2101      	movs	r1, #1
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	615a      	str	r2, [r3, #20]
	W1_SET_OUT;
 8000a5c:	2390      	movs	r3, #144	; 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	2390      	movs	r3, #144	; 0x90
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2103      	movs	r1, #3
 8000a68:	438a      	bics	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	2390      	movs	r3, #144	; 0x90
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	2390      	movs	r3, #144	; 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2101      	movs	r1, #1
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
	delayUs(60);
 8000a7c:	203c      	movs	r0, #60	; 0x3c
 8000a7e:	f7ff ffcb 	bl	8000a18 <delayUs>
	W1_OUT &= ~W1_OUT_BMASK;
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	2390      	movs	r3, #144	; 0x90
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	438a      	bics	r2, r1
 8000a90:	615a      	str	r2, [r3, #20]
	delayUs(490); // 480 us
 8000a92:	23f5      	movs	r3, #245	; 0xf5
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ffbe 	bl	8000a18 <delayUs>
	W1_SET_IN;
 8000a9c:	2390      	movs	r3, #144	; 0x90
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	438a      	bics	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
	delayUs(60); // 60 us
 8000aac:	203c      	movs	r0, #60	; 0x3c
 8000aae:	f7ff ffb3 	bl	8000a18 <delayUs>
	*presence = (W1_IN & (W1_IN_BMASK)) ? no : present; // no presence detect
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4013      	ands	r3, r2
 8000abc:	425a      	negs	r2, r3
 8000abe:	4153      	adcs	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	701a      	strb	r2, [r3, #0]
	delayUs(490); // 480 us
 8000ac8:	23f5      	movs	r3, #245	; 0xf5
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ffa3 	bl	8000a18 <delayUs>
	if ((W1_IN & (W1_IN_BMASK)) == 0) { // short circuit or lagg on bus
 8000ad2:	2390      	movs	r3, #144	; 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	d102      	bne.n	8000ae4 <checkPresence+0xa4>
		*presence = no;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ae4:	b662      	cpsie	i
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
	}
	__enable_irq();
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <writeByte>:

void writeByte(ui8 byte) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	701a      	strb	r2, [r3, #0]
	ui8 temp = byte, i;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	for (i = 0; i < 8; i++) {
 8000b0a:	230e      	movs	r3, #14
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e03b      	b.n	8000b8c <writeByte+0x9c>
		W1_OUT &= ~W1_OUT_BMASK;
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2101      	movs	r1, #1
 8000b20:	438a      	bics	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
		W1_SET_OUT;
 8000b24:	2390      	movs	r3, #144	; 0x90
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	2103      	movs	r1, #3
 8000b30:	438a      	bics	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	2390      	movs	r3, #144	; 0x90
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	2390      	movs	r3, #144	; 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2101      	movs	r1, #1
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
		if(temp & 1) {
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d003      	beq.n	8000b58 <writeByte+0x68>
			delayUs(2);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff ff61 	bl	8000a18 <delayUs>
 8000b56:	e002      	b.n	8000b5e <writeByte+0x6e>
		} else {
			delayUs(60);
 8000b58:	203c      	movs	r0, #60	; 0x3c
 8000b5a:	f7ff ff5d 	bl	8000a18 <delayUs>
		}
		W1_OUT |= W1_OUT_BMASK;
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	2390      	movs	r3, #144	; 0x90
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	615a      	str	r2, [r3, #20]
		delayUs(60);
 8000b6e:	203c      	movs	r0, #60	; 0x3c
 8000b70:	f7ff ff52 	bl	8000a18 <delayUs>
//		W1_SET_IN;
		temp >>= 1;
 8000b74:	220f      	movs	r2, #15
 8000b76:	18bb      	adds	r3, r7, r2
 8000b78:	18ba      	adds	r2, r7, r2
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	0852      	lsrs	r2, r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8000b80:	210e      	movs	r1, #14
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	3201      	adds	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	230e      	movs	r3, #14
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9be      	bls.n	8000b14 <writeByte+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b96:	b662      	cpsie	i
}
 8000b98:	46c0      	nop			; (mov r8, r8)
	  }
	__enable_irq();
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <readByte>:

ui8 readByte(void) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
	ui8 byte = 0, i;
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	for (i = 0; i < 8; i++) {
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e057      	b.n	8000c6a <readByte+0xc8>
		byte >>= 1;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	1dfa      	adds	r2, r7, #7
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	0852      	lsrs	r2, r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
		W1_OUT &= ~W1_OUT_BMASK;
 8000bc4:	2390      	movs	r3, #144	; 0x90
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	2390      	movs	r3, #144	; 0x90
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	2101      	movs	r1, #1
 8000bd0:	438a      	bics	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
		W1_SET_OUT;
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	2390      	movs	r3, #144	; 0x90
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2103      	movs	r1, #3
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	2390      	movs	r3, #144	; 0x90
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	2390      	movs	r3, #144	; 0x90
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
		delayUs(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff ff0f 	bl	8000a18 <delayUs>
		W1_SET_IN;
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	2390      	movs	r3, #144	; 0x90
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2103      	movs	r1, #3
 8000c06:	438a      	bics	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
		delayUs(15);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f7ff ff04 	bl	8000a18 <delayUs>
		if ((W1_IN & W1_IN_BMASK) != 0) {
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d006      	beq.n	8000c2a <readByte+0x88>
			byte |= 0x80;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	4249      	negs	r1, r1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
		}
		W1_OUT |= W1_OUT_BMASK;
 8000c2a:	2390      	movs	r3, #144	; 0x90
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	2390      	movs	r3, #144	; 0x90
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	615a      	str	r2, [r3, #20]
		W1_SET_OUT;
 8000c3a:	2390      	movs	r3, #144	; 0x90
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2390      	movs	r3, #144	; 0x90
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	2103      	movs	r1, #3
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2390      	movs	r3, #144	; 0x90
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	2101      	movs	r1, #1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]
		delayUs(45);
 8000c5a:	202d      	movs	r0, #45	; 0x2d
 8000c5c:	f7ff fedc 	bl	8000a18 <delayUs>
	for (i = 0; i < 8; i++) {
 8000c60:	1dbb      	adds	r3, r7, #6
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	3201      	adds	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	1dbb      	adds	r3, r7, #6
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d9a3      	bls.n	8000bba <readByte+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c72:	b662      	cpsie	i
}
 8000c74:	46c0      	nop			; (mov r8, r8)
	}
	__enable_irq();
	return byte;
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <startDS>:

PT_THREAD(startDS(struct pt* pt)) {
 8000c82:	b590      	push	{r4, r7, lr}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	ui8 dsPresent;
	PT_BEGIN(pt);
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	2b5d      	cmp	r3, #93	; 0x5d
 8000c98:	d026      	beq.n	8000ce8 <startDS+0x66>
 8000c9a:	dc47      	bgt.n	8000d2c <startDS+0xaa>
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <startDS+0x24>
 8000ca0:	2b5c      	cmp	r3, #92	; 0x5c
 8000ca2:	d010      	beq.n	8000cc6 <startDS+0x44>
 8000ca4:	e042      	b.n	8000d2c <startDS+0xaa>
	checkPresence(&dsPresent);
 8000ca6:	240e      	movs	r4, #14
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fec8 	bl	8000a40 <checkPresence>
	if (dsPresent) {
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d039      	beq.n	8000d2c <startDS+0xaa>
		PT_YIELD(pt); writeByte(SKIP_ROM);
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	225c      	movs	r2, #92	; 0x5c
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <startDS+0x52>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e033      	b.n	8000d3c <startDS+0xba>
 8000cd4:	20cc      	movs	r0, #204	; 0xcc
 8000cd6:	f7ff ff0b 	bl	8000af0 <writeByte>
		PT_YIELD(pt); writeByte(START_DS);
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	225d      	movs	r2, #93	; 0x5d
 8000ce6:	801a      	strh	r2, [r3, #0]
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <startDS+0x74>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e022      	b.n	8000d3c <startDS+0xba>
 8000cf6:	2044      	movs	r0, #68	; 0x44
 8000cf8:	f7ff fefa 	bl	8000af0 <writeByte>
#ifdef PARASITE_POWER
		W1_SET_OUT;
 8000cfc:	2390      	movs	r3, #144	; 0x90
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	2390      	movs	r3, #144	; 0x90
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	2103      	movs	r1, #3
 8000d08:	438a      	bics	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	2390      	movs	r3, #144	; 0x90
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	2390      	movs	r3, #144	; 0x90
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
		W1_OUT |= W1_OUT_BMASK;
 8000d1c:	2390      	movs	r3, #144	; 0x90
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	2390      	movs	r3, #144	; 0x90
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
#endif
	}
	PT_END(pt);
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	2303      	movs	r3, #3
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b005      	add	sp, #20
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <readDS>:

static ui8 packet[9];

PT_THREAD(readDS(struct pt* pt, ui8* returnCode, i16* temperature)) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	ui8 dsPresent;
	i16 i;
	PT_BEGIN(pt);
 8000d50:	2315      	movs	r3, #21
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b71      	cmp	r3, #113	; 0x71
 8000d5e:	d042      	beq.n	8000de6 <readDS+0xa2>
 8000d60:	dd00      	ble.n	8000d64 <readDS+0x20>
 8000d62:	e0dd      	b.n	8000f20 <readDS+0x1dc>
 8000d64:	2b6f      	cmp	r3, #111	; 0x6f
 8000d66:	d028      	beq.n	8000dba <readDS+0x76>
 8000d68:	dd00      	ble.n	8000d6c <readDS+0x28>
 8000d6a:	e0d9      	b.n	8000f20 <readDS+0x1dc>
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <readDS+0x32>
 8000d70:	2b6e      	cmp	r3, #110	; 0x6e
 8000d72:	d011      	beq.n	8000d98 <readDS+0x54>
 8000d74:	e0d4      	b.n	8000f20 <readDS+0x1dc>
	checkPresence(&dsPresent);
 8000d76:	2414      	movs	r4, #20
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fe60 	bl	8000a40 <checkPresence>
	if (dsPresent) {
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d100      	bne.n	8000d8a <readDS+0x46>
 8000d88:	e0ca      	b.n	8000f20 <readDS+0x1dc>
		PT_YIELD(pt); writeByte(SKIP_ROM);
 8000d8a:	2315      	movs	r3, #21
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	226e      	movs	r2, #110	; 0x6e
 8000d96:	801a      	strh	r2, [r3, #0]
 8000d98:	2315      	movs	r3, #21
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <readDS+0x62>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0c4      	b.n	8000f30 <readDS+0x1ec>
 8000da6:	20cc      	movs	r0, #204	; 0xcc
 8000da8:	f7ff fea2 	bl	8000af0 <writeByte>
		PT_YIELD(pt); writeByte(READ_DS);
 8000dac:	2315      	movs	r3, #21
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	226f      	movs	r2, #111	; 0x6f
 8000db8:	801a      	strh	r2, [r3, #0]
 8000dba:	2315      	movs	r3, #21
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <readDS+0x84>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0b3      	b.n	8000f30 <readDS+0x1ec>
 8000dc8:	20be      	movs	r0, #190	; 0xbe
 8000dca:	f7ff fe91 	bl	8000af0 <writeByte>
		for(i = 0; i < sizeof(packet); i++) {
 8000dce:	2316      	movs	r3, #22
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	801a      	strh	r2, [r3, #0]
 8000dd6:	e01f      	b.n	8000e18 <readDS+0xd4>
			PT_YIELD(pt); packet[i] = readByte();
 8000dd8:	2315      	movs	r3, #21
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2271      	movs	r2, #113	; 0x71
 8000de4:	801a      	strh	r2, [r3, #0]
 8000de6:	2315      	movs	r3, #21
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <readDS+0xb0>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e09d      	b.n	8000f30 <readDS+0x1ec>
 8000df4:	2516      	movs	r5, #22
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	2400      	movs	r4, #0
 8000dfa:	5f1c      	ldrsh	r4, [r3, r4]
 8000dfc:	f7ff fed1 	bl	8000ba2 <readByte>
 8000e00:	0003      	movs	r3, r0
 8000e02:	001a      	movs	r2, r3
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <readDS+0x1f4>)
 8000e06:	551a      	strb	r2, [r3, r4]
		for(i = 0; i < sizeof(packet); i++) {
 8000e08:	197b      	adds	r3, r7, r5
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	5e9b      	ldrsh	r3, [r3, r2]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	197b      	adds	r3, r7, r5
 8000e16:	801a      	strh	r2, [r3, #0]
 8000e18:	2016      	movs	r0, #22
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d9da      	bls.n	8000dd8 <readDS+0x94>
		}
		i =  packet[0] | (packet[1] << 8);
 8000e22:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <readDS+0x1f4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b219      	sxth	r1, r3
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <readDS+0x1f4>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	430a      	orrs	r2, r1
 8000e34:	801a      	strh	r2, [r3, #0]
		if (i == (85*16)) {
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	5e9a      	ldrsh	r2, [r3, r2]
 8000e3c:	23aa      	movs	r3, #170	; 0xaa
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d103      	bne.n	8000e4c <readDS+0x108>
			*returnCode = defaultValue;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e069      	b.n	8000f20 <readDS+0x1dc>
		} else {
			i = dsCRC(packet, sizeof(packet)-1);
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <readDS+0x1f4>)
 8000e4e:	2108      	movs	r1, #8
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff fd8d 	bl	8000970 <dsCRC>
 8000e56:	0003      	movs	r3, r0
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2016      	movs	r0, #22
 8000e5c:	183b      	adds	r3, r7, r0
 8000e5e:	801a      	strh	r2, [r3, #0]
			if (i == packet[8]) { // crc match
 8000e60:	183b      	adds	r3, r7, r0
 8000e62:	2200      	movs	r2, #0
 8000e64:	5e9b      	ldrsh	r3, [r3, r2]
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <readDS+0x1f4>)
 8000e68:	7a12      	ldrb	r2, [r2, #8]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d155      	bne.n	8000f1a <readDS+0x1d6>
				i =  packet[0] | (packet[1] << 8);
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <readDS+0x1f4>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b219      	sxth	r1, r3
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <readDS+0x1f4>)
 8000e76:	785b      	ldrb	r3, [r3, #1]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	183b      	adds	r3, r7, r0
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	801a      	strh	r2, [r3, #0]
				if (i & (1 << 11)) {
 8000e82:	183b      	adds	r3, r7, r0
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	001a      	movs	r2, r3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d022      	beq.n	8000ed6 <readDS+0x192>
					i = ~i;
 8000e90:	183b      	adds	r3, r7, r0
 8000e92:	183a      	adds	r2, r7, r0
 8000e94:	8812      	ldrh	r2, [r2, #0]
 8000e96:	43d2      	mvns	r2, r2
 8000e98:	801a      	strh	r2, [r3, #0]
//					i = -((i >> 4) * 10 + (i & 0x000F) * 10 / 16);
					i = -((i >> 4) * 100 + (i & 0x000F) * 6);
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	1c1a      	adds	r2, r3, #0
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	18db      	adds	r3, r3, r3
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	5e5b      	ldrsh	r3, [r3, r1]
 8000eb4:	111b      	asrs	r3, r3, #4
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	1c19      	adds	r1, r3, #0
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	0089      	lsls	r1, r1, #2
 8000ec2:	18c9      	adds	r1, r1, r3
 8000ec4:	00c9      	lsls	r1, r1, #3
 8000ec6:	1acb      	subs	r3, r1, r3
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	e018      	b.n	8000f08 <readDS+0x1c4>
				} else {
//					i = (i >> 4) * 10 + (i & 0x000F) * 10 / 16;
					i = (i >> 4) * 100 + (i & 0x000F) * 6;
 8000ed6:	2016      	movs	r0, #22
 8000ed8:	183b      	adds	r3, r7, r0
 8000eda:	2200      	movs	r2, #0
 8000edc:	5e9b      	ldrsh	r3, [r3, r2]
 8000ede:	111b      	asrs	r3, r3, #4
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2264      	movs	r2, #100	; 0x64
 8000ee6:	4353      	muls	r3, r2
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	183b      	adds	r3, r7, r0
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	210f      	movs	r1, #15
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	1c19      	adds	r1, r3, #0
 8000ef6:	1c0b      	adds	r3, r1, #0
 8000ef8:	18db      	adds	r3, r3, r3
 8000efa:	185b      	adds	r3, r3, r1
 8000efc:	18db      	adds	r3, r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	183b      	adds	r3, r7, r0
 8000f06:	801a      	strh	r2, [r3, #0]
				}
				*returnCode = correctValue;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	701a      	strb	r2, [r3, #0]
				*temperature = i;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2216      	movs	r2, #22
 8000f12:	18ba      	adds	r2, r7, r2
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	801a      	strh	r2, [r3, #0]
 8000f18:	e002      	b.n	8000f20 <readDS+0x1dc>
			} else {
				*returnCode = error;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	PT_END(pt);
 8000f20:	2315      	movs	r3, #21
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	2303      	movs	r3, #3
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b006      	add	sp, #24
 8000f36:	bdb0      	pop	{r4, r5, r7, pc}
 8000f38:	20000048 	.word	0x20000048

08000f3c <drawDigit>:
		(segmA + segmB + segmC + segmD + segmE + segmF + segmG),	// 8
		(segmA + segmB + segmC + segmD + segmF + segmG),				// 9
		(segmG)														// HYPHEN_SYMBOL
};

void drawDigit(ui8 digit, ui8 position) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	1c0a      	adds	r2, r1, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	// turn off segments and digit
	GPIOB->BRR = segmAll;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <drawDigit+0x64>)
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BSRR = digitAll;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <drawDigit+0x68>)
 8000f56:	220f      	movs	r2, #15
 8000f58:	619a      	str	r2, [r3, #24]


	if(digit & POINT) {
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da08      	bge.n	8000f76 <drawDigit+0x3a>
		GPIOB->BSRR = segmDP;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <drawDigit+0x64>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	619a      	str	r2, [r3, #24]
		digit &= ~POINT;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	1dfa      	adds	r2, r7, #7
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	217f      	movs	r1, #127	; 0x7f
 8000f72:	400a      	ands	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
	}
	if(digit < sizeof(segmentToPort)) {
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d805      	bhi.n	8000f8a <drawDigit+0x4e>
		GPIOB->BSRR = segmentToPort[digit];
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <drawDigit+0x6c>)
 8000f84:	5cd2      	ldrb	r2, [r2, r3]
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <drawDigit+0x64>)
 8000f88:	619a      	str	r2, [r3, #24]
	}

	GPIOC->BRR = (1 << position);
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	409a      	lsls	r2, r3
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <drawDigit+0x68>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff fa20 	bl	80003f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fda:	f000 f811 	bl	8001000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff fb73 	bl	80006c8 <main>

08000fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   r0, =_estack
 8000fe4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ff0:	08001078 	.word	0x08001078
  ldr r2, =_sbss
 8000ff4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ff8:	20000054 	.word	0x20000054

08000ffc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_COMP_IRQHandler>
	...

08001000 <__libc_init_array>:
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	2600      	movs	r6, #0
 8001004:	4d0c      	ldr	r5, [pc, #48]	; (8001038 <__libc_init_array+0x38>)
 8001006:	4c0d      	ldr	r4, [pc, #52]	; (800103c <__libc_init_array+0x3c>)
 8001008:	1b64      	subs	r4, r4, r5
 800100a:	10a4      	asrs	r4, r4, #2
 800100c:	42a6      	cmp	r6, r4
 800100e:	d109      	bne.n	8001024 <__libc_init_array+0x24>
 8001010:	2600      	movs	r6, #0
 8001012:	f000 f819 	bl	8001048 <_init>
 8001016:	4d0a      	ldr	r5, [pc, #40]	; (8001040 <__libc_init_array+0x40>)
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <__libc_init_array+0x44>)
 800101a:	1b64      	subs	r4, r4, r5
 800101c:	10a4      	asrs	r4, r4, #2
 800101e:	42a6      	cmp	r6, r4
 8001020:	d105      	bne.n	800102e <__libc_init_array+0x2e>
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	00b3      	lsls	r3, r6, #2
 8001026:	58eb      	ldr	r3, [r5, r3]
 8001028:	4798      	blx	r3
 800102a:	3601      	adds	r6, #1
 800102c:	e7ee      	b.n	800100c <__libc_init_array+0xc>
 800102e:	00b3      	lsls	r3, r6, #2
 8001030:	58eb      	ldr	r3, [r5, r3]
 8001032:	4798      	blx	r3
 8001034:	3601      	adds	r6, #1
 8001036:	e7f2      	b.n	800101e <__libc_init_array+0x1e>
 8001038:	08001070 	.word	0x08001070
 800103c:	08001070 	.word	0x08001070
 8001040:	08001070 	.word	0x08001070
 8001044:	08001074 	.word	0x08001074

08001048 <_init>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr

08001054 <_fini>:
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105a:	bc08      	pop	{r3}
 800105c:	469e      	mov	lr, r3
 800105e:	4770      	bx	lr
